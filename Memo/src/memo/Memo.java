package memo;

public class Memo {

    public static void main(String[] args) {
        System.out.println("Hello Git!!");

        // Memo를 정리함
        /*
         * 자바는 플랫폼에 종속되지 않는 프로그램을 개발할 수 있음
         * 자바에서 프로그램을 컴파일하면 class 파일이 생성되는데, 이 class 파일은 바이트 코드로 중간 기계어임
         * 그래서 각 운영체제에 맞는 자바 가상 머신(JVM; Java Virtual Machine)을 사용하여, 운영체제에 상관없이 코드를 돌릴 수 있음
         *
         *  자바 소스 코드(Example.java) -> JIT 자바 컴파일러 -> 바이트 코드(Example.class) -> JVM -> 실행
         *
         *  그래서 각 운영체제에 맞는 자바 실행 환경(JRE; Java Runtime Environment)를 설치해하면, 자바 가상 머신을 설치할 수 있음
         *
         *  자바에서는 자바 개발 키트(JDK; Java Development Kit)를 제공함
         *  이는 기본 기능을 제공하는 클래스 뿐 아니라 자료 구조, 네트워크, 입출력, 예외 처리 등에 최적화된 알고리즘 라이브러리를 제공함
         */

        /*
         * 클래스는 객체의 속성과 기능을 코드로 구현한 것
         * (접근 제어자) class 클래스 이름 {
         * 		멤버 변수; -> 객체의 속성
         *		메서드; -> 객체의 기능
         * }
         *
         * 하나의 자바 파일레 하나의 클래스를 두는 것이 원칙이나, 여러 개의 클래스가 같이 있는 경우 public 클래스는 단 하나이며, public 클래스와 자바 파일의 이름은 동일해야 함!
         * 자바의 모든 코드는 class 내부에 위치함
         * 클래스 이름은 모두 대문자로 시작
         */

        /*
         * 패키지란 클래스 파일의 묶음
         * 패키지는 계층 구조를 가질 수 있음 -> 프로젝트 전체 소스 코드를 구성하는 계층 구조가 됨 -> 잘 만들어야 유지보수가 편리함
         * 같은 이름의 클래스라도 다른 패키지에 속하면 서로 연관이 없음!
         * 페키지 이름은 모두 소문자로 만듦
         */

        /*
         * 메서드는 객체의 기능을 제공하기 위해 클래스 내부에 구현되는 함수
         * 메서드 이름은 해당 클래스를 사용하는 코드의 입장에서 짓는 것이 좋음
         * 예를 들어, Student 클래스를 사용하는 A 클래스가 있을 때, A 클래스에서 학생 이름을 가져오는 메서드는 getStudentName으로 Student 클래스 안에 구현함
         * 변수와 메서드 이름은 낙타 표기법을 사용함
         * 함수가 호출되면 '스택 메모리'에 생성됨
         */

        /*
         * main() 함수는 자바 가상 머신이 프로그램을 시작하기 위해 호출하는 함수임
         * 클래스 내부에 만들지만, 클래스의 메서드는 아님!
         * 클래스 내부가 아닌, 테스트용 클래스를 따로 만들어 main() 함수를 실행하기도 함
         * 이때 서로 다른 패키지에 있는 클래스를 사용하려면, import문을 사용해 사용하기 원하는 클래스를 불러와야 함. 같은 패키지 안이라면 상관없음!
         */

        /*
         * 인스턴스는 클래스가 메모리 공간에 생성된 상태임
         * 생성된 클래스의 인스턴스를 객체라고도 함!
         * 클래스의 생성자를 호출하면 인스턴스가 생성되며, 하나의 클래스로부터 여러 개의 인스턴스를 생성할 수 있음
         *
         * 참조 변수를 사용하면 인스턴스의 멤버 변수와 메서드를 참조할 수 있음
         * 		참조 변수.멤버 변수
         * 		참조 변수.메서드
         * 클래스 생성자를 하나 호출하면 인스턴스가 '힙 메모리'에 생성됨 ,
         * 참조 변수는 힙 메모리에 생성된 인스턴스를 가리킴 ,
         * 즉 힙 메모리에 생성된 인스턴스의 메모리 주소는 참조 변수에 저장된
         */

        /*
         * 생성자는 인스턴스를 초기화 할 때의 명령어 집합을 말함
         * 생성자의 이름은 그 클래스의 이름과 같음
         * 생성자는 메서드가 아니기 때문에 상속되지 않으며, 리턴 값은 없음
         * <modifier><class-name> ([argument_list]){
         * 		[statements]
         * }
         * 생성자가 없는 클래스는 클래스 파일을 컴파일할 때 자바 컴파일러에서 자동으로 생성자를 만들어줌 = 디폴트 생성자
         * private 멤버 변수는 외부 클래스에서 값을 지정하지 못하기 때문에, 매개 변수가 있는 생성자를 구현하고 이를 사용하는 것이 편함
         */

        /*
         * 이클립스에서 get(), set() 자동 생성하기
         * 1. 선언한 클래스 내부에서 오른쪽 마우스 클릭
         * 2. Source -> Generate Getters and Setters
         * 3. 메서드를 추가하고 싶은 멤버 변수를 선택
         */

        /*
         * 참조 자료형은 클래스 자료형으로 선언하는 것을 말함
         * 예를 들어 String은 JDK에서 제공하는 참조 자료형임
         * 참조 자료형은 프로그래머가 필요에 의해 만든 클래스를 사용할 수도 있음
         */
    }
}
